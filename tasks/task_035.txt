# Task ID: 35
# Title: Implement Dynamic Header Management for API Data
# Status: pending
# Dependencies: None
# Priority: high
# Description: Refactor the application to dynamically extract and manage headers from API responses for sheet generation, instead of using hardcoded headers in repositories. This includes creating a header mapping service, a storage mechanism for headers, enhancing base repository and model classes, and providing a UI for header management.
# Details:

# Subtasks:
## 1. Create HeaderMappingService [pending]
### Dependencies: None
### Description: Create a new file data/headerMappingService.js. This service will utilize existing extractHeaders() to generate headers, transform dot-notation paths to Title Case, implement header persistence (interacting with HeaderMappings sheet), compare API vs stored headers, and handle user overrides.
### Details:
Key functions to implement in HeaderMappingService:
- `generateHeadersFromApiResponse(apiResponseObject)`: Uses `extractHeaders` from `dataProcessing.js`.
- `transformHeaderName(apiFieldPath)`: Converts paths like 'amount.value' to 'Amount Value'. Handles 'dividend.gained' to 'Dividend Gained'.
- `getStoredHeaders(resourceIdentifier)`: Fetches headers for a given API resource from the 'HeaderMappings' sheet.
- `storeHeaders(resourceIdentifier, apiHeaders, transformedHeaders)`: Saves the API field paths and their transformed versions to the 'HeaderMappings' sheet.
- `applyUserOverrides(resourceIdentifier, currentHeaders)`: Checks the 'HeaderMappings' sheet for user-overridden header names and applies them.
- `detectAndLogHeaderChanges(resourceIdentifier, newApiHeaders)`: Compares new headers from an API response with stored headers and logs differences. Potentially flags them for user review.

## 2. Implement Header Storage Mechanism [pending]
### Dependencies: None
### Description: Create a new sheet named 'HeaderMappings' to store and manage header configurations. This sheet will allow for user overrides and provide a centralized place for header definitions.
### Details:
The 'HeaderMappings' sheet should have the following columns:
- Column A: `API Resource Name` (e.g., 'DIVIDENDS', 'PIES_SUMMARY', 'PIE_DETAILS_XYZ'). This identifies the source of the data.
- Column B: `Original API Field Path` (e.g., 'amount.value', 'instruments.ticker'). This is the raw path extracted from the API response.
- Column C: `Transformed Header Name` (e.g., 'Amount Value', 'Instrument Ticker'). This is the user-facing header name, initially generated by `transformHeaderName` and editable by the user.
- Column D: `User Override Flag` (boolean): Set to TRUE if the user has manually changed the 'Transformed Header Name' in Column C. This helps preserve user customizations.

The `HeaderMappingService` will be responsible for reading from and writing to this sheet. Ensure `SheetManager` can interact with this new sheet type.

## 3. Create/Enhance BaseRepository [pending]
### Dependencies: None
### Description: Create a new `repositories/BaseRepository.js` or enhance an existing one. This base class will handle common repository functionalities, integrate with the HeaderMappingService for dynamic header management, and provide standardized methods for data fetching and sheet interaction.
### Details:
The `BaseRepository` should include:
- Constructor that accepts `apiClient`, `sheetManager`, `errorHandler`, and `headerMappingService`.
- `_initializeHeaders(resourceIdentifier, sampleApiResponse)`: Method to be called by subclasses. It fetches/generates headers using `HeaderMappingService` and stores them internally for the repository instance. It should handle initial header generation and subsequent updates if API response structures change.
- `_getHeaders(resourceIdentifier)`: Retrieves the current effective headers (after transformation and overrides) for a given resource.
- `_transformDataToSheetRows(dataArray, resourceIdentifier)`: Uses the current headers to convert an array of API response objects into an array of sheet rows.
- `_transformSheetRowsToModels(sheetRows, resourceIdentifier, ModelClass)`: Uses current headers to convert sheet data back into an array of Model instances.
- Common methods like `fetchAllFromApiAndSaveToSheet`, `getAllFromSheet` could be generalized here if applicable across repositories, or serve as templates for subclasses.

## 4. Integrate Model Classes with Dynamic Headers [pending]
### Dependencies: None
### Description: Update existing Model classes (DividendModel, PieItemModel, PieModel, TransactionModel) to work seamlessly with dynamic headers provided by the repositories and HeaderMappingService.
### Details:
Modifications for each Model class:
- Remove hardcoded assumptions about header order or names in `toSheetRow()` and `fromSheetRow()` methods.
- `toSheetRow(headers)`: Modify to accept an array of `transformedHeaderNames`. It should iterate through these headers, resolve the corresponding data from the model instance (using the original API field path mapped to the header), and construct the row array in the order of the provided `headers`.
- `fromSheetRow(rowData, headers)`: Modify to accept `rowData` and an array of `transformedHeaderNames`. It should map `rowData` values to model properties based on the `headers` array, looking up the original API field path associated with each header to correctly populate the `rawData` object for the constructor.
- Add a static method `getExpectedApiFieldPaths()` that returns an array of all API field paths the model expects (e.g., ['id', 'ticker', 'amount.value', 'amount.currency']). This can be used by `HeaderMappingService` or `BaseRepository` for validation or initial header generation if a sample API response isn't available.
- Ensure robust null-safety and type checking during these transformations.

## 5. Refactor Existing Repositories [pending]
### Dependencies: None
### Description: Refactor `DividendRepository`, `PieItemRepository`, `PieRepository`, and `TransactionRepository` to extend the new `BaseRepository` and utilize the dynamic header management system.
### Details:
For each repository:
- Modify the constructor to accept and pass `headerMappingService` to the `super()` call for `BaseRepository`.
- Remove the hardcoded `this.sheetHeaders` property.
- In methods like `fetchAll...` or `get...ById`, after fetching raw API data, call `this._initializeHeaders(resourceIdentifier, sampleDataFromResponse)` to ensure headers are up-to-date with `HeaderMappingService`.
- Replace manual data-to-row mapping (e.g., `dividends.map(dividend => dividend.toSheetRow())`) with calls to `this._transformDataToSheetRows(apiDataArray, resourceIdentifier)`.
- Replace manual row-to-model mapping (e.g., `dataRows.map(row => DividendModel.fromSheetRow(row, this.sheetHeaders))`) with calls to `this._transformSheetRowsToModels(sheetRowsArray, resourceIdentifier, CorrespondingModelClass)`.
- Ensure the correct `resourceIdentifier` (e.g., 'DIVIDENDS', 'PIES_SUMMARY') is used when interacting with header methods.
- For backward compatibility during the transition, the first time a repository initializes headers for a resource, it could attempt to seed the `HeaderMappingService` with its current hardcoded headers if no API data is available yet, or if the API data doesn't cover all previously hardcoded fields.

## 6. Create User Interface for Header Management [pending]
### Dependencies: None
### Description: Develop a simple user interface within the Google Sheets add-on to allow users to view and manage header mappings. This UI will interact with the 'HeaderMappings' sheet and the HeaderMappingService.
### Details:
UI Features:
- **Display Current Mappings**: Show a table listing API Resource Name, Original API Field Path, and the current Transformed Header Name (user-facing).
- **Edit Header Names**: Allow users to directly edit the 'Transformed Header Name' for any mapping. This action should update the 'HeaderMappings' sheet and set the 'User Override Flag' to TRUE.
- **Reset to Default**: Provide an option for a selected mapping (or all mappings for a resource) to reset the 'Transformed Header Name' back to the auto-generated version (based on `transformHeaderName` from `HeaderMappingService`) and clear the 'User Override Flag'.
- **Highlight Changes**: If `HeaderMappingService.detectAndLogHeaderChanges` identifies new or removed fields from an API response, the UI should visually indicate these discrepancies to the user, prompting them to review and potentially update mappings.
- This UI could be a new sidebar panel or a modal dialog triggered from a custom menu item in the Google Sheet.

